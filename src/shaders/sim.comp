#version 430 core
layout(binding = 0, rgba8) uniform image2D framebufferImage;
layout(location = 0) uniform vec3 cam[5] = {
  vec3(0.0, 2.0, 40.0), // <- position
  vec3(-1.0, -1.0, -1.0), vec3(-1.0, 1.0, -1.0), // <- left corner directions
  vec3(1.0, -1.0, -1.0), vec3(1.0, 1.0, -1.0) // <- right corner directions
};
layout(location = 5) uniform int window_width;
layout(location = 6) uniform int window_height;
uniform isamplerBuffer bufferTex;
layout(std430, binding = 7) buffer shaderStorage{
  int[] octreeBuffer;
};

float rand(vec2 co){
    return (fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453));
}

#define EPSILON 3.552713678800501e-15f
#define PI 3.14159265359f

int getByte(uint bytePointer){
  uint r = bytePointer % 4;
  uint i = bytePointer / 4;
  return int((octreeBuffer[i] & (0x000000ff << (r*8u))) >> (r*8u));
}

layout(local_size_x = 8, local_size_y = 8) in;
void main(void) {
  ivec2 px = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(framebufferImage);
  if (any(greaterThanEqual(px, size)))
    return;
  vec3 finalcolor = vec3(0);
  int curval = octreeBuffer[window_width * px.y + px.x];
  //uint curval = getByte(window_width * px.y + px.x);
  if(curval != 0) finalcolor = vec3(1);
  //if(window_width == 0) finalcolor = vec3(1.0, 0, 1.0);
  imageStore(framebufferImage, px, (vec4(finalcolor, 1.0)));
}